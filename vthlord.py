import os
import time
import pyfiglet
import aiohttp
import asyncio
import json
from colorama import Fore, Style, init
import requests
from collections import defaultdict, Counter
from urllib.parse import urlparse, parse_qs
import re
init()
os.system("cls")
def clear_screen():
    os.system("cls" if os.name == "nt" else "clear")

def parse_escapemaster_url(url):
    """Parse URL ƒë·ªÉ l·∫•y userId v√† secretKey"""
    try:
        parsed_url = urlparse(url)
        query_params = parse_qs(parsed_url.query)
        
        user_id = query_params.get('userId', [None])[0]
        secret_key = query_params.get('secretKey', [None])[0]
        
        if user_id and secret_key:
            return user_id, secret_key
        else:
            return None, None
    except Exception as e:
        print(Fore.RED + f"L·ªói khi parse URL: {e}" + Style.RESET_ALL)
        return None, None

current_time = int(time.time() * 1000)

from rich.console import Console
from rich.panel import Panel
from rich.table import Table

console = Console()

# Panel ti√™u ƒë·ªÅ
console.print(Panel.fit("[bold cyan]H∆Ø·ªöNG D·∫™N L·∫§Y LINK[/bold cyan]", border_style="cyan", padding=(1, 2)))

# T·∫°o b·∫£ng h∆∞·ªõng d·∫´n
table = Table(show_header=False, box=None)
table.add_column("B∆∞·ªõc", style="bold white")
table.add_column("H∆∞·ªõng D·∫´n", style="white")

table.add_row("[bold cyan]B1[/bold cyan]", "V√†o [bold magenta]xworld.io[/bold magenta] v√† ƒëƒÉng nh·∫≠p")
table.add_row("[bold cyan]B2[/bold cyan]", "V√†o game [bold green]Vua Th√≥at Hi·ªÉm[/bold green]")
table.add_row("[bold cyan]B3[/bold cyan]", "Sao ch√©p link URL t·ª´ thanh ƒë·ªãa ch·ªâ")

console.print(table)

# Hi·ªÉn th·ªã v√≠ d·ª• link
console.print(Panel.fit("[yellow]VD: https://escapemaster.net/battleroyale/?userId=XXXXX&secretKey=XXXXXXXXXXXXXXXX&language=default[/yellow]", title="V√≠ d·ª•", border_style="yellow", padding=(1, 2)))



import os
import json
import time
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt

console = Console()

def nhap_du_lieu():
    console.print("\n[bold yellow]Tool By PhuocAn[/bold yellow]")
    console.print(Panel.fit("[bold cyan]NH·∫¨P TH√îNG TIN NG∆Ø·ªúI D√ôNG[/bold cyan]", border_style="cyan", padding=(1, 2)))

    file_name = "xworld_data.json"

    # N·∫øu file ƒë√£ t·ªìn t·∫°i ‚Üí ƒë·ªçc l·∫°i, n·∫øu l·ªói th√¨ y√™u c·∫ßu nh·∫≠p l·∫°i
    if os.path.exists(file_name):
        try:
            with open(file_name, "r") as f:
                data = json.load(f)
            console.print("[green]‚úÖ ƒê√£ t√¨m th·∫•y th√¥ng tin c≈©, d√πng l·∫°i...[/green]")
            user_id = data.get("user_id", "")
            user_login = data.get("user_login", "login_v2")
            user_secret_key = data.get("user_secret_key", "")
        except (json.JSONDecodeError, ValueError):
            console.print("[red]‚ö† File b·ªã l·ªói ho·∫∑c tr·ªëng! Vui l√≤ng nh·∫≠p l·∫°i.[/red]")
            os.remove(file_name)
            return nhap_du_lieu()  # G·ªçi l·∫°i h√†m ƒë·ªÉ nh·∫≠p l·∫°i
    else:
        user_id = Prompt.ask("[yellow]‚û§ UID Acc Xworld[/yellow]")
        user_secret_key = Prompt.ask("[yellow]‚û§ Secret Key Xworld[/yellow]")

        with open(file_name, "w") as f:
            json.dump({
                "user_id": user_id,
                "user_login": "login_v2",
                "user_secret_key": user_secret_key
            }, f)
        console.print("[green]‚úÖ ƒê√£ l∆∞u th√¥ng tin v√†o file![/green]")

    # Nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c
    while True:
        try:
            amount = int(Prompt.ask("[yellow]‚û§ S·ªë ti·ªÅn c∆∞·ª£c ban ƒë·∫ßu (t·ªëi thi·ªÉu 1 BUILD)[/yellow]"))
            if amount < 1:
                raise ValueError
            break
        except ValueError:
            console.print("[red]‚ö† Vui l√≤ng nh·∫≠p s·ªë nguy√™n ‚â• 1 cho s·ªë ti·ªÅn c∆∞·ª£c.[/red]")
            time.sleep(1)

    console.print("\n[green]‚úÖ Nh·∫≠p d·ªØ li·ªáu th√†nh c√¥ng![/green]")
    return user_id, user_secret_key, amount

# G·ªçi h√†m nh·∫≠p d·ªØ li·ªáu
user_id, user_secret_key, amount = nhap_du_lieu()
user_login = "login_v2"

amount = int(input(Fore.YELLOW + "Nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c ban ƒë·∫ßu (nh·ªè nh·∫•t 1 build): "))

print(Fore.CYAN + "\n=== C√ÄI ƒê·∫∂T STOP LOSS/TAKE PROFIT ===" + Style.RESET_ALL)
while True:
    stop_loss_input = input(Fore.YELLOW + "B·∫≠t Stop Loss? (y/n): ").strip().lower()
    if stop_loss_input == 'y':
        stop_loss_enabled = True
        break
    elif stop_loss_input == 'n':
        stop_loss_enabled = False
        break
    else:
        print(Fore.RED + "Vui l√≤ng nh·∫≠p 'y' ho·∫∑c 'n'" + Style.RESET_ALL)

stop_loss_amount = 0
take_profit_amount = 0

if stop_loss_enabled:
    stop_loss_amount = int(input(Fore.YELLOW + "Nh·∫≠p s·ªë BUILD d·ª´ng l·ªó (VD: 100): "))
    take_profit_amount = int(input(Fore.YELLOW + "Nh·∫≠p s·ªë BUILD d·ª´ng l·ªùi (VD: 200): "))

# C√†i ƒë·∫∑t g·∫•p c∆∞·ª£c
print(Fore.CYAN + "\n=== C√ÄI ƒê·∫∂T G·∫§P C∆Ø·ª¢C ===" + Style.RESET_ALL)
while True:
    martingale_input = input(Fore.YELLOW + "B·∫≠t g·∫•p c∆∞·ª£c khi thua? (y/n): ").strip().lower()
    if martingale_input == 'y':
        martingale_enabled = True
        break
    elif martingale_input == 'n':
        martingale_enabled = False
        break
    else:
        print(Fore.RED + "Vui l√≤ng nh·∫≠p 'y' ho·∫∑c 'n'" + Style.RESET_ALL)

# C√†i ƒë·∫∑t h·ªá s·ªë g·∫•p khi thua
if martingale_enabled:
    print(Fore.CYAN + "\n=== C√ÄI ƒê·∫∂T H·ªÜ S·ªê G·∫§P C∆Ø·ª¢C ===" + Style.RESET_ALL)
    print(Fore.WHITE + "H·ªá s·ªë g·∫•p m·∫∑c ƒë·ªãnh: L·∫ßn 1: x15, L·∫ßn 2: x20, L·∫ßn 3: x15" + Style.RESET_ALL)
    while True:
        custom_input = input(Fore.YELLOW + "T√πy ch·ªânh h·ªá s·ªë g·∫•p? (y/n): ").strip().lower()
        if custom_input == 'y':
            custom_multiplier = True
            break
        elif custom_input == 'n':
            custom_multiplier = False
            break
        else:
            print(Fore.RED + "Vui l√≤ng nh·∫≠p 'y' ho·∫∑c 'n'" + Style.RESET_ALL)

    multiplier_1 = 15
    multiplier_2 = 20
    multiplier_3 = 15

    if custom_multiplier:
        multiplier_1 = float(input(Fore.YELLOW + "Nh·∫≠p h·ªá s·ªë g·∫•p l·∫ßn 1 (m·∫∑c ƒë·ªãnh 15): ") or "15")
        multiplier_2 = float(input(Fore.YELLOW + "Nh·∫≠p h·ªá s·ªë g·∫•p l·∫ßn 2 (m·∫∑c ƒë·ªãnh 20): ") or "20")
        multiplier_3 = float(input(Fore.YELLOW + "Nh·∫≠p h·ªá s·ªë g·∫•p l·∫ßn 3 (m·∫∑c ƒë·ªãnh 15): ") or "15")
else:
    custom_multiplier = False
    multiplier_1 = 1
    multiplier_2 = 1
    multiplier_3 = 1

# C√†i ƒë·∫∑t ph√¢n t√≠ch d·ª± ƒëo√°n
print(Fore.CYAN + "\n=== C√ÄI ƒê·∫∂T PH√ÇN T√çCH D·ª∞ ƒêO√ÅN ===" + Style.RESET_ALL)
while True:
    prediction_input = input(Fore.YELLOW + "B·∫≠t ph√¢n t√≠ch d·ª± ƒëo√°n k·∫øt qu·∫£? (y/n): ").strip().lower()
    if prediction_input == 'y':
        prediction_enabled = True
        break
    elif prediction_input == 'n':
        prediction_enabled = False
        break
    else:
        print(Fore.RED + "Vui l√≤ng nh·∫≠p 'y' ho·∫∑c 'n'" + Style.RESET_ALL)

cuoc_ban_dau = amount
so_du_ban_dau = 0
tool_running = True  # Bi·∫øn ƒëi·ªÅu khi·ªÉn vi·ªác d·ª´ng tool
colors = [Fore.RED, Fore.GREEN, Fore.YELLOW, Fore.BLUE, Fore.MAGENTA, Fore.CYAN, Fore.WHITE]

# Bi·∫øn l∆∞u tr·ªØ l·ªãch s·ª≠ k·∫øt qu·∫£ ƒë·ªÉ ph√¢n t√≠ch
history_results = []
last_checked_issue = None
so_du_truoc_cuoc = 0  # S·ªë d∆∞ tr∆∞·ªõc khi ƒë·∫∑t c∆∞·ª£c

def print_colored_ascii_art(text):
    ascii_art = pyfiglet.figlet_format(text)
    lines = ascii_art.splitlines()
    for i, line in enumerate(lines):
        print(colors[i % len(colors)] + line + Style.RESET_ALL)

url = f"https://user.3games.io/user/regist?is_cwallet=1&is_mission_setting=true&version=&time={current_time}"
api_10_van = f"https://api.escapemaster.net/escape_game/recent_10_issues?asset=BUILD"
api_100_van = f"https://api.escapemaster.net/escape_game/recent_100_issues?asset=BUILD"
api_cuoc = "https://api.escapemaster.net/escape_game/bet"
api_my_joined = "https://api.escapemaster.net/escape_game/my_joined?asset=BUILD&page=1&page_size=10"

headers = {
    "user-id": user_id,
    "user-login": user_login,
    "user-secret-key": user_secret_key,
    "accept": "*/*",
    "accept-language": "vi,en;q=0.9",
    "country-code": "vn",
    "origin": "https://xworld.info",
    "priority": "u=1, i",
    "referer": "https://xworld.info/",
    "sec-fetch-dest": "empty",
    "sec-fetch-mode": "cors",
    "sec-fetch-site": "cross-site",
    "user-agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1",
    "xb-language": "vi-VN",
    "Content-Type": "application/json"
}

def Login():
    global so_du_ban_dau
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            if data.get("code") == 200:
                username = data["data"]["username"]
                ctoken_contribute = data["data"]["cwallet"]["ctoken_contribute"]
                # Kh√¥ng l√†m tr√≤n, gi·ªØ nguy√™n s·ªë th·∫≠p ph√¢n
                print(Fore.GREEN + f"Username: {username}")
                so_du_ban_dau = ctoken_contribute
                print(Fore.GREEN + f"S·ªë D∆∞: {ctoken_contribute:.2f} BUILD" + Style.RESET_ALL)
                print(Fore.CYAN + f"üîç Debug: ƒê√£ l∆∞u so_du_ban_dau = {so_du_ban_dau:.2f}" + Style.RESET_ALL)
            else:
                print(Fore.RED + f"ƒêƒÉng nh·∫≠p kh√¥ng th√†nh c√¥ng" + Style.RESET_ALL)
                print(Fore.RED + f"Ctrl C ƒë·ªÉ d·ª´ng tool" + Style.RESET_ALL)
                return
        else:
            print(f"L·ªói m·∫°ng")
    except requests.RequestException as e:
        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh")

def tong_loi_lo():
    global tool_running
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            if data.get("code") == 200:
                ctoken_contribute = data["data"]["cwallet"]["ctoken_contribute"]
                # T√≠nh to√°n l·ªùi/l·ªó th·ª±c t·∫ø (kh√¥ng t√≠nh ti·ªÅn ƒë·∫∑t c∆∞·ª£c hi·ªán t·∫°i)
                loi_lo = ctoken_contribute - so_du_ban_dau
                
                # Debug: hi·ªÉn th·ªã th√¥ng tin t√≠nh to√°n
                print(Fore.CYAN + f"üîç Debug: S·ªë d∆∞ hi·ªán t·∫°i={ctoken_contribute:.2f}, S·ªë d∆∞ ban ƒë·∫ßu={so_du_ban_dau:.2f}, Ch√™nh l·ªách={loi_lo:.2f}" + Style.RESET_ALL)

                # Ki·ªÉm tra Stop Loss/Take Profit
                if stop_loss_enabled:
                    if loi_lo <= -stop_loss_amount:
                        print(Fore.RED + f"üõë ƒê√É ƒê·∫†T STOP LOSS: {loi_lo:.2f} BUILD" + Style.RESET_ALL)
                        print(Fore.RED + f"üõë D·ª™NG TOOL T·ª∞ ƒê·ªòNG!" + Style.RESET_ALL)
                        tool_running = False
                        return
                    elif loi_lo >= take_profit_amount:
                        print(Fore.GREEN + f"üéØ ƒê√É ƒê·∫†T TAKE PROFIT: {loi_lo:.2f} BUILD" + Style.RESET_ALL)
                        print(Fore.GREEN + f"üéØ D·ª™NG TOOL T·ª∞ ƒê·ªòNG!" + Style.RESET_ALL)
                        tool_running = False
                        return

                print(Fore.CYAN + f"üí∞ S·ªë d∆∞ hi·ªán t·∫°i: {ctoken_contribute:.2f} BUILD" + Style.RESET_ALL)
                print(Fore.CYAN + f"üí∞ S·ªë d∆∞ ban ƒë·∫ßu: {so_du_ban_dau:.2f} BUILD" + Style.RESET_ALL)
                
                # Hi·ªÉn th·ªã l·ªùi/l·ªó th·ª±c t·∫ø (kh√¥ng t√≠nh ti·ªÅn ƒë·∫∑t c∆∞·ª£c hi·ªán t·∫°i)
                if loi_lo >= 0:
                    print(Fore.GREEN + f"üìä T·ªîNG TH·ªÇ: +{loi_lo:.2f} BUILD (L·ªúI)" + Style.RESET_ALL)
                else:
                    # Ki·ªÉm tra xem c√≥ ph·∫£i do ti·ªÅn ƒë·∫∑t c∆∞·ª£c hi·ªán t·∫°i kh√¥ng
                    if abs(loi_lo) <= amount:
                        print(Fore.YELLOW + f"üìä T·ªîNG TH·ªÇ: {loi_lo:.2f} BUILD (TI·ªÄN C∆Ø·ª¢C HI·ªÜN T·∫†I)" + Style.RESET_ALL)
                    else:
                        print(Fore.RED + f"üìä T·ªîNG TH·ªÇ: {loi_lo:.2f} BUILD (L·ªñ)" + Style.RESET_ALL)
        else:
            print(f"L·ªói m·∫°ng")
    except requests.RequestException as e:
        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")

def phan_tich_lich_su():
    """Ph√¢n t√≠ch l·ªãch s·ª≠ 100 v√°n g·∫ßn nh·∫•t ƒë·ªÉ d·ª± ƒëo√°n"""
    global history_results
    try:
        response = requests.get(api_100_van, headers=headers)
        if response.status_code == 200:
            data = response.json()
            if data.get("code") == 0:
                issues = data.get("data", [])
                history_results = []
                
                room_mapping = {
                    1: "Nh√† Kho",
                    2: "Ph√≤ng H·ªçp", 
                    3: "Ph√≤ng Gi√°m ƒê·ªëc",
                    4: "Ph√≤ng Tr√≤ Chuy·ªán",
                    5: "Ph√≤ng Gi√°m S√°t",
                    6: "VƒÉn Ph√≤ng",
                    7: "Ph√≤ng T√†i V·ª•",
                    8: "Ph√≤ng Nh√¢n S·ª±"
                }
                
                # Ki·ªÉm tra v√† x·ª≠ l√Ω t·ª´ng issue
                for issue in issues:
                    try:
                        # Ki·ªÉm tra xem issue c√≥ ph·∫£i l√† dictionary kh√¥ng
                        if isinstance(issue, dict) and "killed_room_id" in issue:
                            room_id = issue["killed_room_id"]
                            room_name = room_mapping.get(room_id, "Kh√¥ng x√°c ƒë·ªãnh")
                            history_results.append(room_name)
                        else:
                            continue
                    except Exception as e:
                        print(Fore.YELLOW + f"L·ªói x·ª≠ l√Ω issue: {e}" + Style.RESET_ALL)
                        continue
                
                if not history_results:
                    return None
                
                # Ph√¢n t√≠ch t·∫ßn su·∫•t xu·∫•t hi·ªán
                room_counts = Counter(history_results)
                total_games = len(history_results)
                
                print(Fore.CYAN + "\n=== PH√ÇN T√çCH L·ªäCH S·ª¨ 100 V√ÅN G·∫¶N NH·∫§T ===" + Style.RESET_ALL)
                for room, count in room_counts.most_common():
                    percentage = (count / total_games) * 100
                    print(Fore.WHITE + f"{room}: {count} l·∫ßn ({percentage:.1f}%)" + Style.RESET_ALL)
                
                # T√¨m ph√≤ng c√≥ t·∫ßn su·∫•t th·∫•p nh·∫•t (c√≥ th·ªÉ s·∫Ω xu·∫•t hi·ªán ti·∫øp theo)
                least_frequent_room = min(room_counts.items(), key=lambda x: x[1])
                print(Fore.YELLOW + f"\nüîÆ D·ª± ƒëo√°n: {least_frequent_room[0]} c√≥ th·ªÉ xu·∫•t hi·ªán ti·∫øp theo (√≠t xu·∫•t hi·ªán nh·∫•t)" + Style.RESET_ALL)
                
                return least_frequent_room[0]
            else:
                print(Fore.RED + f"L·ªói API: {data.get('message', 'Kh√¥ng x√°c ƒë·ªãnh')}" + Style.RESET_ALL)
        else:
            print(Fore.RED + f"L·ªói HTTP: {response.status_code}" + Style.RESET_ALL)
    except requests.RequestException as e:
        print(Fore.RED + f"L·ªói ph√¢n t√≠ch l·ªãch s·ª≠: {e}" + Style.RESET_ALL)
    except Exception as e:
        print(Fore.RED + f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}" + Style.RESET_ALL)
    return None

def kiem_tra_ket_qua_cuoc():
    """Ki·ªÉm tra k·∫øt qu·∫£ c∆∞·ª£c v·ª´a ƒë·∫∑t"""
    global last_checked_issue, chuoi_thang, so_du_truoc_cuoc
    
    # Th·ª≠ ki·ªÉm tra k·∫øt qu·∫£ t·ªëi ƒëa 5 l·∫ßn v·ªõi delay
    max_attempts = 5
    for attempt in range(max_attempts):
        try:
            response = requests.get(api_my_joined, headers=headers, timeout=10)
            if response.status_code == 200:
                try:
                    data = response.json()
                    if data.get("code") == 0:
                        items = data.get("data", {}).get("items", [])
                        if items:
                            latest_bet = items[0]  # C∆∞·ª£c g·∫ßn nh·∫•t
                            issue_id = latest_bet.get("issue_id")
                            bet_amount = latest_bet.get("bet_amount", 0)
                            enter_room_id = latest_bet.get("enter_room_id")
                            enter_room = latest_bet.get("enter_room", "Kh√¥ng x√°c ƒë·ªãnh")
                            killed_room_id = latest_bet.get("killed_room_id")
                            killed_room = latest_bet.get("killed_room", "Kh√¥ng x√°c ƒë·ªãnh")
                            
                            # T√≠nh to√°n k·∫øt qu·∫£ - LOGIC ƒê√öNG
                            if enter_room_id == killed_room_id:
                                result = "lose"  # V√†o ph√≤ng s√°t th·ªß v√†o = THUA (b·ªã gi·∫øt)
                            else:
                                result = "win"   # V√†o ph√≤ng kh√°c = TH·∫ÆNG (s·ªëng s√≥t)
                            
                            # Debug: hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
                            # print(Fore.CYAN + f"üîç Debug: B·∫°n v√†o ID={enter_room_id}, S√°t th·ªß v√†o ID={killed_room_id}, K·∫øt qu·∫£={result}" + Style.RESET_ALL)
                            
                            # Ch·ªâ ki·ªÉm tra n·∫øu l√† v√°n m·ªõi ho·∫∑c c√≥ k·∫øt qu·∫£
                            if issue_id != last_checked_issue:
                                last_checked_issue = issue_id
                                
                                # Th√™m delay ƒë·ªÉ ƒë·ª£i k·∫øt qu·∫£ c·ªßa v√≤ng v·ª´a ƒë·∫∑t c∆∞·ª£c
                                time.sleep(2)
                                
                                # Hi·ªÉn th·ªã th√¥ng tin s√°t th·ªß
                                print(Fore.LIGHTYELLOW_EX + f"üî™ S√°t th·ªß v√†o: {killed_room}" + Style.RESET_ALL)
                                
                                # Hi·ªÉn th·ªã ph√≤ng ƒë·∫∑t c∆∞·ª£c thay v√¨ ph√≤ng k·∫øt qu·∫£
                                room_mapping_reverse = {
                                    1: "Nh√† Kho",
                                    2: "Ph√≤ng H·ªçp", 
                                    3: "Ph√≤ng Gi√°m ƒê·ªëc",
                                    4: "Ph√≤ng Tr√≤ Chuy·ªán",
                                    5: "Ph√≤ng Gi√°m S√°t",
                                    6: "VƒÉn Ph√≤ng",
                                    7: "Ph√≤ng T√†i V·ª•",
                                    8: "Ph√≤ng Nh√¢n S·ª±"
                                }
                                
                                # L·∫•y room_id t·ª´ last_checked_issue ƒë·ªÉ hi·ªÉn th·ªã ph√≤ng ƒë·∫∑t c∆∞·ª£c
                                try:
                                    response_bet = requests.get(api_my_joined, headers=headers, timeout=5)
                                    if response_bet.status_code == 200:
                                        bet_data = response_bet.json()
                                        if bet_data.get("code") == 0:
                                            bet_items = bet_data.get("data", {}).get("items", [])
                                            if bet_items:
                                                bet_room_id = bet_items[0].get("enter_room_id")
                                                bet_room_name = room_mapping_reverse.get(bet_room_id, "Kh√¥ng x√°c ƒë·ªãnh")
                                                print(Fore.LIGHTBLUE_EX + f"üéØ B·∫°n ƒë·∫∑t c∆∞·ª£c v√†o: {bet_room_name}" + Style.RESET_ALL)
                                            else:
                                                print(Fore.LIGHTBLUE_EX + f"üéØ B·∫°n v√†o: {enter_room}" + Style.RESET_ALL)
                                        else:
                                            print(Fore.LIGHTBLUE_EX + f"üéØ B·∫°n v√†o: {enter_room}" + Style.RESET_ALL)
                                    else:
                                        print(Fore.LIGHTBLUE_EX + f"üéØ B·∫°n v√†o: {enter_room}" + Style.RESET_ALL)
                                except:
                                    print(Fore.LIGHTBLUE_EX + f"üéØ B·∫°n v√†o: {enter_room}" + Style.RESET_ALL)
                                
                                # T√≠nh to√°n k·∫øt qu·∫£ v√°n c·ª• th·ªÉ tr∆∞·ªõc
                                try:
                                    # Th√™m delay ƒë·ªÉ ƒë·∫£m b·∫£o s·ªë d∆∞ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
                                    time.sleep(1)
                                    
                                    response_balance = requests.get(url, headers=headers, timeout=5)
                                    if response_balance.status_code == 200:
                                        balance_data = response_balance.json()
                                        if balance_data.get("code") == 200:
                                            so_du_sau_cuoc = balance_data["data"]["cwallet"]["ctoken_contribute"]
                                            ket_qua_van = so_du_sau_cuoc - so_du_truoc_cuoc
                                            
                                            # S·ª¨A: S·ª≠ d·ª•ng logic game thay v√¨ ch√™nh l·ªách s·ªë d∆∞
                                            # Ch√™nh l·ªách -1.00 l√† ti·ªÅn ƒë·∫∑t c∆∞·ª£c, kh√¥ng ph·∫£i k·∫øt qu·∫£ th·∫Øng/thua
                                            actual_result = result  # S·ª≠ d·ª•ng logic game
                                            
                                            if actual_result == "win":
                                                print(Fore.GREEN + f"üí∞ V√°n n√†y TH·∫ÆNG: +{bet_amount:.2f} BUILD" + Style.RESET_ALL)
                                            else:
                                                print(Fore.RED + f"üí∞ V√°n n√†y THUA: -{bet_amount:.2f} BUILD" + Style.RESET_ALL)
                                                
                                except Exception as e:
                                    print(Fore.RED + f"‚ùå L·ªói t√≠nh to√°n s·ªë d∆∞: {e}" + Style.RESET_ALL)
                                    actual_result = result  # Fallback v·ªÅ logic c≈©
                                
                                # C·∫≠p nh·∫≠t chu·ªói th·∫Øng d·ª±a tr√™n k·∫øt qu·∫£ th·ª±c t·∫ø
                                if actual_result == "win":
                                    chuoi_thang += 1
                                    print(Fore.LIGHTMAGENTA_EX + f"Chu·ªói th·∫Øng li√™n ti·∫øp hi·ªán t·∫°i: {chuoi_thang} v√°n" + Style.RESET_ALL)
                                elif actual_result == "lose":
                                    chuoi_thang = 0
                                    print(Fore.LIGHTMAGENTA_EX + f"Chu·ªói th·∫Øng li√™n ti·∫øp hi·ªán t·∫°i: {chuoi_thang} v√°n" + Style.RESET_ALL)
                                
                                tong_loi_lo()
                                return True
                            else:
                                # N·∫øu ch∆∞a c√≥ k·∫øt qu·∫£ m·ªõi, ƒë·ª£i th√™m
                                if attempt < max_attempts - 1:
                                    time.sleep(1)
                                    continue
                                else:
                                    print(Fore.YELLOW + "‚è≥ Ch∆∞a c√≥ k·∫øt qu·∫£ m·ªõi, ƒë·ª£i v√≤ng ti·∫øp theo..." + Style.RESET_ALL)
                                    return False
                        else:
                            if attempt == 0:
                                print(Fore.YELLOW + "‚è≥ Ch∆∞a c√≥ d·ªØ li·ªáu c∆∞·ª£c, ƒëang ch·ªù..." + Style.RESET_ALL)
                            time.sleep(0.5)
                            continue
                    else:
                        error_msg = data.get('msg', 'Kh√¥ng x√°c ƒë·ªãnh')
                        print(Fore.RED + f"L·ªói API: {error_msg}" + Style.RESET_ALL)
                        
                        # N·∫øu l·ªói login, th·ª≠ refresh session
                        if data.get("code") == 1004 and "Must login" in error_msg:
                            print(Fore.YELLOW + "üîÑ ƒêang th·ª≠ refresh session..." + Style.RESET_ALL)
                            if refresh_session():
                                # Th·ª≠ l·∫°i request sau khi refresh
                                continue
                        
                        if attempt == max_attempts - 1:
                            print(Fore.CYAN + f"üîç Debug API Response: {data}" + Style.RESET_ALL)
                        break
                except Exception as json_error:
                    print(Fore.RED + f"L·ªói parse JSON: {json_error}" + Style.RESET_ALL)
                    if attempt == max_attempts - 1:
                        print(Fore.CYAN + f"üîç Debug Raw Response: {response.text}" + Style.RESET_ALL)
                    break
            else:
                print(Fore.RED + f"L·ªói HTTP: {response.status_code}" + Style.RESET_ALL)
                if attempt == max_attempts - 1:
                    print(Fore.CYAN + f"üîç Debug Response: {response.text}" + Style.RESET_ALL)
                break
                
        except requests.RequestException as e:
            print(Fore.RED + f"L·ªói ki·ªÉm tra k·∫øt qu·∫£: {e}" + Style.RESET_ALL)
            break
        except Exception as e:
            print(Fore.RED + f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}" + Style.RESET_ALL)
            break
    
    print(Fore.YELLOW + "‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y k·∫øt qu·∫£ sau nhi·ªÅu l·∫ßn th·ª≠" + Style.RESET_ALL)
    return False

vong_choi = None
chuoi_thang = 0
count_thang = 0

def lich_su():
    global vong_choi
    try:
        response = requests.get(api_10_van, headers=headers)
        if response.status_code == 200:
            data = response.json()
            if data.get("code") == 0:
                room_mapping = {
                    1: "Nh√† Kho",
                    2: "Ph√≤ng H·ªçp",
                    3: "Ph√≤ng Gi√°m ƒê·ªëc",
                    4: "Ph√≤ng Tr√≤ Chuy·ªán",
                    5: "Ph√≤ng Gi√°m S√°t",
                    6: "VƒÉn Ph√≤ng",
                    7: "Ph√≤ng T√†i V·ª•",
                    8: "Ph√≤ng Nh√¢n S·ª±"
                }
                issues = data.get("data", [])[:3]
                vong_choi_truoc = issues[0]["issue_id"]
                id_ket_qua_vong_truoc = issues[0]["killed_room_id"]
                ten_phong_vong_truoc = room_mapping.get(id_ket_qua_vong_truoc, "Kh√¥ng x√°c ƒë·ªãnh")
                vong_choi_hien_tai = issues[0]["issue_id"] + 1
                issue_details = []
                for issue in issues:
                    issue_id = issue["issue_id"]
                    killed_room_id = issue["killed_room_id"]
                    room_name = room_mapping.get(killed_room_id, "Kh√¥ng x√°c ƒë·ªãnh")
                    issue_details.append(f"Issue ID: {issue_id}, Room: {room_name}")

                if vong_choi_truoc != vong_choi:
                    print(Fore.LIGHTCYAN_EX + f"V√≤ng ch∆°i hi·ªán t·∫°i: #{vong_choi_hien_tai}" + Style.RESET_ALL)
                    print(Fore.LIGHTYELLOW_EX + f"K·∫øt qu·∫£ v√≤ng tr∆∞·ªõc: #{vong_choi_truoc} | {ten_phong_vong_truoc}" + Style.RESET_ALL)
                    vong_choi = vong_choi_truoc
                    
                    # Ph√¢n t√≠ch d·ª± ƒëo√°n n·∫øu ƒë∆∞·ª£c b·∫≠t
                    if prediction_enabled:
                        try:
                            predicted_room = phan_tich_lich_su()
                        except Exception as e:
                            print(Fore.RED + f"L·ªói khi ph√¢n t√≠ch d·ª± ƒëo√°n: {e}" + Style.RESET_ALL)
                            predicted_room = None
                    
                    kiem_tra_dieu_kien(issue_details)
                    print("----------------------------------------------------")
    except requests.RequestException as e:
        print(Fore.RED + f"L·ªói: {e}" + Style.RESET_ALL)

number_cuoc = 0

def kiem_tra_dieu_kien(issue_details):
    global number_cuoc,amount,cuoc_ban_dau,chuoi_thang,count_thang,tool_running
    room_mapping = {
            "Nh√† Kho": 1,
            "Ph√≤ng H·ªçp": 2,
            "Ph√≤ng Gi√°m ƒê·ªëc": 3,
            "Ph√≤ng Tr√≤ Chuy·ªán": 4,
            "Ph√≤ng Gi√°m S√°t": 5,
            "VƒÉn Ph√≤ng": 6,
            "Ph√≤ng T√†i V·ª•": 7,
            "Ph√≤ng Nh√¢n S·ª±": 8
        }
    room_0 = issue_details[0].split(",")[1].split(":")[1].strip()
    room_1 = issue_details[1].split(",")[1].split(":")[1].strip()
    room_2 = issue_details[2].split(",")[1].split(":")[1].strip()
    
    # Debug: hi·ªÉn th·ªã th√¥ng tin issue_details
    print(Fore.CYAN + f"üîç Debug: room_0={room_0}, room_1={room_1}, room_2={room_2}, number_cuoc={number_cuoc}" + Style.RESET_ALL)
    
    # N·∫øu b·∫≠t ph√¢n t√≠ch d·ª± ƒëo√°n, ∆∞u ti√™n d·ª± ƒëo√°n
    if prediction_enabled and len(history_results) > 0:
        try:
            predicted_room = min(Counter(history_results).items(), key=lambda x: x[1])[0]
            predicted_room_id = room_mapping.get(predicted_room)
            if predicted_room_id:
                print(Fore.MAGENTA + f"üéØ S·ª≠ d·ª•ng d·ª± ƒëo√°n: {predicted_room}" + Style.RESET_ALL)
                dat_cuoc(predicted_room_id)
                number_cuoc = 1
                return
        except Exception as e:
            print(Fore.YELLOW + f"L·ªói khi s·ª≠ d·ª•ng d·ª± ƒëo√°n: {e}" + Style.RESET_ALL)
            print(Fore.YELLOW + "Chuy·ªÉn sang logic c≈©" + Style.RESET_ALL)
    
    if room_0 != room_1 and number_cuoc == 0 :
        room_name = issue_details[1].split(",")[1].split(":")[1].strip()
        print(Fore.CYAN + f"üéØ ƒê·∫∑t c∆∞·ª£c theo : {room_name}" + Style.RESET_ALL)
        room_id = room_mapping.get(room_name, None)
        dat_cuoc(room_id)
        number_cuoc = 1
        return
    elif room_0 != room_1 and room_0 != room_2 and number_cuoc == 1 :
        room_name = issue_details[1].split(",")[1].split(":")[1].strip()
        print(Fore.CYAN + f"üéØ Th·∫Øng - ƒê·∫∑t c∆∞·ª£c ti·∫øp: {room_name}" + Style.RESET_ALL)
        room_id = room_mapping.get(room_name, None)
        dat_cuoc(room_id)
        number_cuoc = 1
        return
    elif room_0 != room_1 and room_0 == room_2 and number_cuoc == 1 :
        room_name = issue_details[1].split(",")[1].split(":")[1].strip()
        print(Fore.CYAN + f"üéØ Thua - G·∫•p c∆∞·ª£c: {room_name}" + Style.RESET_ALL)
        if not tool_running:
            return
        
        if martingale_enabled:
            amount = int(amount * multiplier_1)
            print(Fore.YELLOW + f"üí∞ G·∫•p c∆∞·ª£c x{multiplier_1}: {amount:.2f} BUILD" + Style.RESET_ALL)
            number_cuoc = 2
        else:
            print(Fore.YELLOW + f"üí∞ Gi·ªØ nguy√™n s·ªë ti·ªÅn c∆∞·ª£c: {amount:.2f} BUILD" + Style.RESET_ALL)
            number_cuoc = 1
            
        room_id = room_mapping.get(room_name, None)
        print(Fore.CYAN + f"üîç Debug: ƒê·∫∑t c∆∞·ª£c room_name={room_name}, room_id={room_id}" + Style.RESET_ALL)
        dat_cuoc(room_id)
        return
    # ---------------------------------------------
    elif room_0 != room_1 and room_0 != room_2 and number_cuoc == 2 :
        room_name = issue_details[1].split(",")[1].split(":")[1].strip()
        print(Fore.CYAN + f"üéØ Th·∫Øng - Reset v·ªÅ c∆° b·∫£n: {room_name}" + Style.RESET_ALL)
        if not tool_running:
            return
        amount = cuoc_ban_dau
        room_id = room_mapping.get(room_name, None)
        dat_cuoc(room_id)
        number_cuoc = 1
        return
    elif room_0 != room_1 and room_0 == room_2 and number_cuoc == 2 :
        room_name = issue_details[1].split(",")[1].split(":")[1].strip()
        print(Fore.CYAN + f"üéØ Thua - G·∫•p c∆∞·ª£c l·∫ßn 2: {room_name}" + Style.RESET_ALL)
        if not tool_running:
            return
        
        if martingale_enabled:
            amount = int(amount * multiplier_2)
            print(Fore.YELLOW + f"üí∞ G·∫•p c∆∞·ª£c x{multiplier_2}: {amount:.2f} BUILD" + Style.RESET_ALL)
            number_cuoc = 3
        else:
            print(Fore.YELLOW + f"üí∞ Gi·ªØ nguy√™n s·ªë ti·ªÅn c∆∞·ª£c: {amount:.2f} BUILD" + Style.RESET_ALL)
            number_cuoc = 1
            
        room_id = room_mapping.get(room_name, None)
        dat_cuoc(room_id)
        return
    # ----------------------------------
    elif room_0 != room_1 and room_0 != room_2 and number_cuoc == 3 :
        room_name = issue_details[1].split(",")[1].split(":")[1].strip()
        print(Fore.CYAN + f"üéØ Th·∫Øng - Reset v·ªÅ c∆° b·∫£n: {room_name}" + Style.RESET_ALL)
        if not tool_running:
            return
        amount = cuoc_ban_dau
        room_id = room_mapping.get(room_name, None)
        dat_cuoc(room_id)
        number_cuoc = 1
        return
    elif room_0 != room_1 and room_0 == room_2 and number_cuoc == 3 :
        room_name = issue_details[1].split(",")[1].split(":")[1].strip()
        print(Fore.CYAN + f"üéØ Thua - G·∫•p c∆∞·ª£c l·∫ßn 3: {room_name}" + Style.RESET_ALL)
        if not tool_running:
            return
        
        if martingale_enabled:
            amount = int(amount * multiplier_3)
            print(Fore.YELLOW + f"üí∞ G·∫•p c∆∞·ª£c x{multiplier_3}: {amount:.2f} BUILD" + Style.RESET_ALL)
            number_cuoc = 4
        else:
            print(Fore.YELLOW + f"üí∞ Gi·ªØ nguy√™n s·ªë ti·ªÅn c∆∞·ª£c: {amount:.2f} BUILD" + Style.RESET_ALL)
            number_cuoc = 1
            
        room_id = room_mapping.get(room_name, None)
        dat_cuoc(room_id)
        return
    # --------------------------------------
    elif room_0 != room_1 and room_0 != room_2 and number_cuoc == 4 :
        room_name = issue_details[1].split(",")[1].split(":")[1].strip()
        print(Fore.CYAN + f"üéØ Th·∫Øng - Reset v·ªÅ c∆° b·∫£n: {room_name}" + Style.RESET_ALL)
        if not tool_running:
            return
        
        if martingale_enabled:
            amount = cuoc_ban_dau
            print(Fore.YELLOW + f"üí∞ Reset v·ªÅ s·ªë ti·ªÅn ban ƒë·∫ßu: {amount:.2f} BUILD" + Style.RESET_ALL)
        else:
            print(Fore.YELLOW + f"üí∞ Gi·ªØ nguy√™n s·ªë ti·ªÅn c∆∞·ª£c: {amount:.2f} BUILD" + Style.RESET_ALL)
            
        room_id = room_mapping.get(room_name, None)
        dat_cuoc(room_id)
        number_cuoc = 1
        return
    elif room_0 != room_1 and room_0 == room_2 and number_cuoc == 4 :
        room_name = issue_details[1].split(",")[1].split(":")[1].strip()
        print(Fore.CYAN + f"üéØ ƒê√£ ƒë·∫°t g·∫•p c∆∞·ª£c t·ªëi ƒëa - Reset: {room_name}" + Style.RESET_ALL)
        if not tool_running:
            return
        
        if martingale_enabled:
            amount = cuoc_ban_dau
            print(Fore.YELLOW + f"üí∞ Reset v·ªÅ s·ªë ti·ªÅn ban ƒë·∫ßu: {amount:.2f} BUILD" + Style.RESET_ALL)
        else:
            print(Fore.YELLOW + f"üí∞ Gi·ªØ nguy√™n s·ªë ti·ªÅn c∆∞·ª£c: {amount:.2f} BUILD" + Style.RESET_ALL)
            
        room_id = room_mapping.get(room_name, None)
        dat_cuoc(room_id)
        number_cuoc = 1
        return
    # ---------------------------
    elif room_0 == room_1 :
        print(Fore.RED + f"Ph√°t hi·ªán s√°t th·ªß v√†o 1 ph√≤ng li√™n t·ª•c !" + Style.RESET_ALL)
        if not tool_running:
            return
        print(Fore.LIGHTMAGENTA_EX + f"Chu·ªói th·∫Øng li√™n ti·∫øp hi·ªán t·∫°i: {chuoi_thang} v√°n" + Style.RESET_ALL)

def dat_cuoc(room_id):
    global so_du_truoc_cuoc
    
    # Debug: hi·ªÉn th·ªã th√¥ng tin ƒë·∫∑t c∆∞·ª£c
    room_mapping_debug = {
        1: "Nh√† Kho",
        2: "Ph√≤ng H·ªçp", 
        3: "Ph√≤ng Gi√°m ƒê·ªëc",
        4: "Ph√≤ng Tr√≤ Chuy·ªán",
        5: "Ph√≤ng Gi√°m S√°t",
        6: "VƒÉn Ph√≤ng",
        7: "Ph√≤ng T√†i V·ª•",
        8: "Ph√≤ng Nh√¢n S·ª±"
    }
    room_name_debug = room_mapping_debug.get(room_id, "Kh√¥ng x√°c ƒë·ªãnh")
    print(Fore.CYAN + f"üîç Debug: ƒê·∫∑t c∆∞·ª£c room_id={room_id}, room_name={room_name_debug}" + Style.RESET_ALL)
    
    body = {
        "asset_type": "BUILD",
        "bet_amount": amount,
        "room_id": room_id,
        "user_id": headers["user-id"]
    }
    
    # L∆∞u s·ªë d∆∞ tr∆∞·ªõc khi ƒë·∫∑t c∆∞·ª£c
    try:
        response = requests.get(url, headers=headers, timeout=5)
        if response.status_code == 200:
            data = response.json()
            if data.get("code") == 200:
                so_du_truoc_cuoc = data["data"]["cwallet"]["ctoken_contribute"]
    except:
        pass
    
    # Th·ª≠ ƒë·∫∑t c∆∞·ª£c t·ªëi ƒëa 3 l·∫ßn
    max_retries = 3
    for attempt in range(max_retries):
        try:
            response = requests.post(api_cuoc, headers=headers, json=body, timeout=10)
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    if data.get("code") == 0:
                        print(Fore.GREEN + f"‚úÖ C∆∞·ª£c th√†nh c√¥ng {amount:.2f} BUILD (l·∫ßn th·ª≠ {attempt + 1})" + Style.RESET_ALL)
                        # Ki·ªÉm tra k·∫øt qu·∫£ ngay l·∫≠p t·ª©c
                        kiem_tra_ket_qua_cuoc()
                        return True
                    else:
                        error_msg = data.get("message", "Kh√¥ng x√°c ƒë·ªãnh")
                        print(Fore.YELLOW + f"‚ö†Ô∏è L·∫ßn {attempt + 1}: {error_msg}" + Style.RESET_ALL)
                        # Debug: hi·ªÉn th·ªã response chi ti·∫øt
                        if attempt == max_retries - 1:
                            print(Fore.CYAN + f"üîç Debug Response: {data}" + Style.RESET_ALL)
                except Exception as json_error:
                    print(Fore.YELLOW + f"‚ö†Ô∏è L·∫ßn {attempt + 1}: L·ªói parse JSON - {json_error}" + Style.RESET_ALL)
                    if attempt == max_retries - 1:
                        print(Fore.CYAN + f"üîç Debug Raw Response: {response.text}" + Style.RESET_ALL)
            else:
                print(Fore.YELLOW + f"‚ö†Ô∏è L·∫ßn {attempt + 1}: HTTP {response.status_code}" + Style.RESET_ALL)
                if attempt == max_retries - 1:
                    print(Fore.CYAN + f"üîç Debug Response: {response.text}" + Style.RESET_ALL)
                
        except requests.RequestException as e:
            print(Fore.YELLOW + f"‚ö†Ô∏è L·∫ßn {attempt + 1}: L·ªói m·∫°ng - {e}" + Style.RESET_ALL)
        except Exception as e:
            print(Fore.YELLOW + f"‚ö†Ô∏è L·∫ßn {attempt + 1}: L·ªói kh√¥ng x√°c ƒë·ªãnh - {e}" + Style.RESET_ALL)
        
        # ƒê·ª£i 1 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i (tr·ª´ l·∫ßn cu·ªëi)
        if attempt < max_retries - 1:
            time.sleep(1)
    
    print(Fore.RED + f"‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t c∆∞·ª£c sau {max_retries} l·∫ßn th·ª≠!" + Style.RESET_ALL)
    return False

def refresh_session():
    """Refresh session khi b·ªã l·ªói login"""
    global headers
    try:
        # Th·ª≠ ƒëƒÉng nh·∫≠p l·∫°i
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get("code") == 200:
                print(Fore.GREEN + "‚úÖ Session ƒë√£ ƒë∆∞·ª£c refresh th√†nh c√¥ng!" + Style.RESET_ALL)
                return True
            else:
                print(Fore.RED + f"‚ùå Kh√¥ng th·ªÉ refresh session: {data.get('message', 'L·ªói')}" + Style.RESET_ALL)
                return False
        else:
            print(Fore.RED + f"‚ùå L·ªói HTTP khi refresh: {response.status_code}" + Style.RESET_ALL)
            return False
    except Exception as e:
        print(Fore.RED + f"‚ùå L·ªói refresh session: {e}" + Style.RESET_ALL)
        return False

def test_api_connection():
    """Test k·∫øt n·ªëi API tr∆∞·ªõc khi ch·∫°y tool"""
    print(Fore.CYAN + "\n=== KI·ªÇM TRA K·∫æT N·ªêI API ===" + Style.RESET_ALL)
    
    # Test API ƒëƒÉng nh·∫≠p
    try:
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get("code") == 200:
                print(Fore.GREEN + "‚úÖ API ƒëƒÉng nh·∫≠p: OK" + Style.RESET_ALL)
            else:
                print(Fore.RED + f"‚ùå API ƒëƒÉng nh·∫≠p: {data.get('message', 'L·ªói')}" + Style.RESET_ALL)
                return False
        else:
            print(Fore.RED + f"‚ùå API ƒëƒÉng nh·∫≠p: HTTP {response.status_code}" + Style.RESET_ALL)
            return False
    except Exception as e:
        print(Fore.RED + f"‚ùå API ƒëƒÉng nh·∫≠p: {e}" + Style.RESET_ALL)
        return False
    
    # Test API l·ªãch s·ª≠
    try:
        response = requests.get(api_10_van, headers=headers, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get("code") == 0:
                print(Fore.GREEN + "‚úÖ API l·ªãch s·ª≠: OK" + Style.RESET_ALL)
            else:
                print(Fore.RED + f"‚ùå API l·ªãch s·ª≠: {data.get('message', 'L·ªói')}" + Style.RESET_ALL)
                return False
        else:
            print(Fore.RED + f"‚ùå API l·ªãch s·ª≠: HTTP {response.status_code}" + Style.RESET_ALL)
            return False
    except Exception as e:
        print(Fore.RED + f"‚ùå API l·ªãch s·ª≠: {e}" + Style.RESET_ALL)
        return False
    
    # Test API my_joined
    try:
        response = requests.get(api_my_joined, headers=headers, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get("code") == 0:
                print(Fore.GREEN + "‚úÖ API my_joined: OK" + Style.RESET_ALL)
            else:
                print(Fore.RED + f"‚ùå API my_joined: {data.get('message', 'L·ªói')}" + Style.RESET_ALL)
                return False
        else:
            print(Fore.RED + f"‚ùå API my_joined: HTTP {response.status_code}" + Style.RESET_ALL)
            return False
    except Exception as e:
        print(Fore.RED + f"‚ùå API my_joined: {e}" + Style.RESET_ALL)
        return False
    
    print(Fore.GREEN + "üéâ T·∫•t c·∫£ API ƒë·ªÅu ho·∫°t ƒë·ªông t·ªët!" + Style.RESET_ALL)
    return True

if __name__ == "__main__":
    clear_screen()

    print(Fore.CYAN + "\n=== C√ÄI ƒê·∫∂T HI·ªÜN T·∫†I ===" + Style.RESET_ALL)
    print(Fore.WHITE + f"S·ªë ti·ªÅn c∆∞·ª£c ban ƒë·∫ßu: {cuoc_ban_dau:.2f} BUILD" + Style.RESET_ALL)
    if stop_loss_enabled:
        print(Fore.WHITE + f"Stop Loss: -{stop_loss_amount} BUILD" + Style.RESET_ALL)
        print(Fore.WHITE + f"Take Profit: +{take_profit_amount} BUILD" + Style.RESET_ALL)
    else:
        print(Fore.WHITE + "Stop Loss/Take Profit: T·∫ÆT" + Style.RESET_ALL)

    print(Fore.WHITE + f"G·∫•p c∆∞·ª£c: {'B·∫¨T' if martingale_enabled else 'T·∫ÆT'}" + Style.RESET_ALL)
    if martingale_enabled:
        print(Fore.WHITE + f"H·ªá s·ªë g·∫•p: x{multiplier_1} | x{multiplier_2} | x{multiplier_3}" + Style.RESET_ALL)
    print(Fore.WHITE + f"Ph√¢n t√≠ch d·ª± ƒëo√°n: {'B·∫¨T' if prediction_enabled else 'T·∫ÆT'}" + Style.RESET_ALL)
    print(Fore.CYAN + "=========================" + Style.RESET_ALL)

    Login()

    if not test_api_connection():
        print(Fore.RED + "‚ùå C√≥ l·ªói v·ªõi API, vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒëƒÉng nh·∫≠p!" + Style.RESET_ALL)
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        exit()

    if prediction_enabled:
        try:
            phan_tich_lich_su()
        except Exception as e:
            print(Fore.RED + f"L·ªói khi ph√¢n t√≠ch l·ªãch s·ª≠ ban ƒë·∫ßu: {e}" + Style.RESET_ALL)
            print(Fore.YELLOW + "Tool s·∫Ω ti·∫øp t·ª•c ch·∫°y v·ªõi logic c≈©" + Style.RESET_ALL)

    try:
        while tool_running:
            lich_su()
            if not tool_running:
                print(Fore.YELLOW + "\nüõë Tool ƒë√£ d·ª´ng do ƒë·∫°t ƒëi·ªÅu ki·ªán Stop Loss/Take Profit!" + Style.RESET_ALL)
                break
            time.sleep(15)
    except KeyboardInterrupt:
        print(Fore.YELLOW + "\nüõë Tool ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng (Ctrl+C)" + Style.RESET_ALL)
